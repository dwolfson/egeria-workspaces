#
# These commands rebuild the sample configuration documents for qs-metadata-store,
# qs-view-server, qs-engine-host and qs-integration-daemon.  They use IntelliJ's HTTP Client.
#
@baseURL=https://localhost:9443
@adminUserId=garygeeke
@auditLogTopic=logging

###
# ---------------------------------------------
# Metadata Access Store: qs-metadata-store
#
###
# Set up the user Id that this server should use on open metadata requests when it is processing events (and consequently there is no end user id to use).
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-metadata-store/server-user-id?id=qsstorenpa

###
# Set up the description of this server.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-metadata-store/server-description
Content-Type: text/plain

A metadata store that supports Open Metadata Access Services (OMASs) with event notifications.  It provides metadata to qs-view-server, qs-engine-host and qs-integration-daemon.

###
# @name Enable the PostgreSQL Repository
# Set up the local repository to use the PostgreSQL Repository implementation.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-metadata-store/local-repository/mode/postgres-repository
Content-Type: application/json

{
  "databaseURL": "~{postgreSQLDatabaseURL}~?currentSchema=repository_qs_metadata_store",
  "databaseSchema": "repository_qs_metadata_store",
  "secretsStore": "~{secretsStore}~",
  "secretsCollectionName": "~{postgreSQLServerCollectionName}~"
}

###

@qsMetadataStoreMetadataCollectionId=9905c3cb-94c5-4494-9229-0d6f69c0b842

###
# @name Set local metadata collection id
# Set up the identifier of the collection of metadata that originates from this metadata server.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-metadata-store/local-repository/metadata-collection-id
Content-Type: text/plain

{{qsMetadataStoreMetadataCollectionId}}


###
# @name Add PostgreSQL audit log destination
# Add the database audit log destination to the server's configuration document.  The list of severities that are sent to this destination are passed on the request body.  An empty list means all severities.
# The server may have multiple audit log destinations configured.  Typically each destination has a different subset of the severities configured.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-metadata-store/audit-log-destinations/postgres
Content-Type: application/json

{
  "supportedSeverities" : ["Error", "Exception", "Activity", "Action", "Decision", "Security"],
  "databaseURL": "~{postgreSQLDatabaseURL}~?currentSchema=audit_logs",
  "databaseSchema": "audit_logs",
  "secretsStore": "~{secretsStore}~",
  "secretsCollectionName": "~{postgreSQLServerCollectionName}~"
}

###
# Set up the connection for the server security connector.  This connector verifies the authorization of any user calling the server's services.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-metadata-store/security/connection
Content-Type: application/json

{
  "class": "VirtualConnection",
  "connectorType": {
    "class": "ConnectorType",
    "connectorProviderClassName": "org.odpi.openmetadata.metadatasecurity.accessconnector.OpenMetadataAccessSecurityProvider"
  },
  "embeddedConnections" : [{
    "class": "EmbeddedConnection",
    "embeddedConnection" :
    {
      "class" : "Connection",
      "connectorType" :
      {
        "class" : "ConnectorType",
        "connectorProviderClassName" : "org.odpi.openmetadata.adapters.connectors.secretsstore.yaml.YAMLSecretsStoreProvider"
      },
      "endpoint" :
      {
        "class" : "Endpoint",
        "address" : "~{metadataAccessSecretsStore}~"
      },
      "configurationProperties" :
      {
        "secretsCollectionName" : "~{metadataAccessCollectionName}~"
      }
    }
  }
  ]
}

###
# Set up the common properties needed to call your event bus.  The value of ~{kafkaEndpoint}~ is resolved in the
# application.properties file using the `platform.placeholder.variables` property.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-metadata-store/event-bus
Content-Type: application/json

{
"producer":
{
"bootstrap.servers":"~{kafkaEndpoint}~"
},
"consumer":
{
"bootstrap.servers":"~{kafkaEndpoint}~"
}
}


###
# Set up all of the registered, undeprecated Open Metadata Access Services (OMASs) with kafka notifications enabled.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-metadata-store/access-services
Content-Type: application/json

{
  "KarmaPointIncrement" : "1"
}


###
# Add the file name for an open Metadata Archive that should be loaded each time the server starts.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-metadata-store/open-metadata-archives/file
Content-Type: text/plain

content-packs/CoreContentPack.omarchive


###
# -------------------------
# View Server: qs-view-server
#
###
# Set up the user Id that this server should use on open metadata requests when it is processing events (and consequently there is no end user id to use).
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-view-server/server-user-id?id=qsviewnpa

###
# Set up the description of this server.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-view-server/server-description
Content-Type: text/plain

A server that supplies REST API endpoints for User Interfaces and non-Java environments such as Python.

###
# Set up all of the registered, undeprecated Open Metadata View Services (OMVSs).  The request body lists the platforms
# and servers that will appear on the appropriate UI dropdowns.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-view-server/view-services
Content-Type: application/json

{
  "class": "ViewServiceRequestBody",
  "omagserverName": "qs-metadata-store",
  "omagserverPlatformRootURL": "~{egeriaEndpoint}~"
}


###
# @name Add PostgreSQL audit log destination
# Add the database audit log destination to the server's configuration document.  The list of severities that are sent to this destination are passed on the request body.  An empty list means all severities.
# The server may have multiple audit log destinations configured.  Typically each destination has a different subset of the severities configured.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-view-server/audit-log-destinations/postgres
Content-Type: application/json

{
  "supportedSeverities" : ["Error", "Exception", "Activity", "Action", "Decision", "Security"],
  "databaseURL": "~{postgreSQLDatabaseURL}~?currentSchema=audit_logs",
  "databaseSchema": "audit_logs",
  "secretsStore": "~{secretsStore}~",
  "secretsCollectionName": "~{postgreSQLServerCollectionName}~"
}


###
# Set up the connection for the server security connector.  This connector verifies the authorization of any user calling the server's services.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-view-server/security/connection
Content-Type: application/json

{
  "class": "VirtualConnection",
  "connectorType": {
    "class": "ConnectorType",
    "connectorProviderClassName": "org.odpi.openmetadata.metadatasecurity.accessconnector.OpenMetadataAccessSecurityProvider"
  },
  "embeddedConnections" : [{
    "class": "EmbeddedConnection",
    "embeddedConnection" :
    {
      "class" : "Connection",
      "connectorType" :
      {
        "class" : "ConnectorType",
        "connectorProviderClassName" : "org.odpi.openmetadata.adapters.connectors.secretsstore.yaml.YAMLSecretsStoreProvider"
      },
      "endpoint" :
      {
        "class" : "Endpoint",
        "address" : "~{metadataAccessSecretsStore}~"
      },
      "configurationProperties" :
      {
        "secretsCollectionName" : "~{metadataAccessCollectionName}~"
      }
    }
  }
  ]
}


###
# -------------------------
# Engine Host: qs-engine-host
#
###
# Set up the user Id that this server should use on open metadata requests when it is processing events (and consequently there is no end user id to use).
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-engine-host/server-user-id?id=qsenginenpa

###
# Set up the description of this server.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-engine-host/server-description
Content-Type: text/plain

A server that runs governance service requests, triggered by engine actions created in qs-metadata-store.

###
# Set up the address of the qs-metadata-store that will supply the engine host with metadata along with the
# qualified names of the governance engines it will run.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-engine-host/engine-host-services
Content-Type: application/json

{
  "class": "EngineHostServicesConfig",
  "engineList": [
    {
      "class": "EngineConfig",
      "engineId": "6a86651a-c9c1-4aee-8a83-4c028d89f775",
      "engineQualifiedName": "AssetOnboarding",
      "engineUserId": "assetonboardingengine"
    },
    {
      "class": "EngineConfig",
      "engineId": "947248ee-a6eb-4f99-8376-7ff488b6281e",
      "engineQualifiedName": "Stewardship",
      "engineUserId": "stewardshipengine"
    },
    {
      "class": "EngineConfig",
      "engineId": "d91b91c2-e019-4eca-870d-d88f7caae696",
      "engineQualifiedName": "FileSurvey",
      "engineUserId": "filesurveyengine"
    },
    {
      "class": "EngineConfig",
      "engineId": "8be68bbe-54ac-4358-aeb9-90782d4e544c",
      "engineQualifiedName": "FileGovernance",
      "engineUserId": "filegovernanceengine"
    },
    {
      "class": "EngineConfig",
      "engineId": "f71a3abb-6d61-4338-8caf-6124a07e35d2",
      "engineQualifiedName": "UnityCatalogSurvey",
      "engineUserId": "unitycatalogsurveyengine"
    },
    {
      "class": "EngineConfig",
      "engineId": "d4d86ff2-0654-4616-a5f2-3c15c07865b6",
      "engineQualifiedName": "UnityCatalogGovernance",
      "engineUserId": "unitycataloggovernanceengine"
    },
    {
      "class": "EngineConfig",
      "engineId": "c0cf5da9-7725-4bdc-ae6e-6f69b4ce3ba2",
      "engineQualifiedName": "PostgreSQLSurvey",
      "engineUserId": "postgresqlsurveyengine"
    },
    {
      "class": "EngineConfig",
      "engineId": "4a8f28dc-5257-49e3-bfab-6605d83537dd",
      "engineQualifiedName": "PostgreSQLGovernance",
      "engineUserId": "postgresqlgovernanceengine"
    },
    {
      "class": "EngineConfig",
      "engineId": "9b7a1da6-7882-41c7-b838-0e297787972f",
      "engineQualifiedName": "ApacheAtlasSurvey",
      "engineUserId": "apacheatlassurveyengine"
    },
    {
      "class": "EngineConfig",
      "engineId": "f5c3b142-0e10-44ae-a160-a1e4d2f32e13",
      "engineQualifiedName": "ApacheAtlasGovernance",
      "engineUserId": "apacheatlassurveyengine"
    },
    {
      "class": "EngineConfig",
      "engineId": "6e04ff1b-1ba3-4eaf-a821-0d52951cc3c4",
      "engineQualifiedName": "EgeriaSurvey",
      "engineUserId": "egeriasurveyengine"
    },
    {
      "class": "EngineConfig",
      "engineId": "d1d36d25-1176-4cd7-a46c-4dcc62990047",
      "engineQualifiedName": "EgeriaGovernance",
      "engineUserId": "egeriagovernanceengine"
    },
    {
      "class": "EngineConfig",
      "engineId": "5f30c642-ceb4-4374-901f-1990572aa109",
      "engineQualifiedName": "ApacheKafkaSurvey",
      "engineUserId": "apachekafkasurveyengine"
    },
    {
      "class": "EngineConfig",
      "engineId": "e107c6ea-7fbe-407b-b51f-e35a488ef49d",
      "engineQualifiedName": "ApacheKafkaGovernance",
      "engineUserId": "apachekafkagovernanceengine"
    },
    {
      "class": "EngineConfig",
      "engineId": "67676a0a-cf44-48b9-bedd-09b0870071b9",
      "engineQualifiedName": "MetadataObservability",
      "engineUserId": "observabilitygovernanceengine"
    }
  ],
  "omagserverPlatformRootURL": "~{egeriaEndpoint}~",
  "omagserverName": "qs-metadata-store"
}

###
# @name Add PostgreSQL audit log destination
# Add the database audit log destination to the server's configuration document.  The list of severities that are sent to this destination are passed on the request body.  An empty list means all severities.
# The server may have multiple audit log destinations configured.  Typically each destination has a different subset of the severities configured.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-engine-host/audit-log-destinations/postgres
Content-Type: application/json

{
  "supportedSeverities" : ["Error", "Exception", "Activity", "Action", "Decision", "Security"],
  "databaseURL": "~{postgreSQLDatabaseURL}~?currentSchema=audit_logs",
  "databaseSchema": "audit_logs",
  "secretsStore": "~{secretsStore}~",
  "secretsCollectionName": "~{postgreSQLServerCollectionName}~"
}


###
# Set up the connection for the server security connector.  This connector verifies the authorization of any user calling the server's services.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-engine-host/security/connection
Content-Type: application/json

{
  "class": "VirtualConnection",
  "connectorType": {
    "class": "ConnectorType",
    "connectorProviderClassName": "org.odpi.openmetadata.metadatasecurity.accessconnector.OpenMetadataAccessSecurityProvider"
  },
  "embeddedConnections" : [{
    "class": "EmbeddedConnection",
    "embeddedConnection" :
    {
      "class" : "Connection",
      "connectorType" :
      {
        "class" : "ConnectorType",
        "connectorProviderClassName" : "org.odpi.openmetadata.adapters.connectors.secretsstore.yaml.YAMLSecretsStoreProvider"
      },
      "endpoint" :
      {
        "class" : "Endpoint",
        "address" : "~{metadataAccessSecretsStore}~"
      },
      "configurationProperties" :
      {
        "secretsCollectionName" : "~{metadataAccessCollectionName}~"
      }
    }
  }
  ]
}


###
# ---------------------------------------
# Integration Daemon: integration-daemon
#
###
# Set up the user Id that this server should use on open metadata requests when it is processing events (and consequently there is no end user id to use).
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-integration-daemon/server-user-id?id=qsdaemonnpa

###
# Set up the description of this server.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-integration-daemon/server-description
Content-Type: text/plain

A server that runs integration connectors that synchronize and exchange metadata with different types of technologies and tools.

###
# Set up the qualified name of the integration group that this server supports and the location of the
# metadata access store qs-metadata-store
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-integration-daemon/integration-groups/configuration/all
Content-Type: application/json

[
    {
        "class": "IntegrationGroupConfig",
        "omagserverPlatformRootURL": "~{egeriaEndpoint}~",
        "omagserverName" : "qs-metadata-store",
        "integrationGroupQualifiedName" : "Egeria:IntegrationGroup:Default"
    },
    {
        "class": "IntegrationGroupConfig",
        "omagserverPlatformRootURL": "~{egeriaEndpoint}~",
        "omagserverName" : "qs-metadata-store",
        "integrationGroupQualifiedName" : "Egeria:IntegrationGroup:ApacheAtlas"
    },
    {
        "class": "IntegrationGroupConfig",
        "omagserverPlatformRootURL": "~{egeriaEndpoint}~",
        "omagserverName" : "qs-metadata-store",
        "integrationGroupQualifiedName" : "Egeria:IntegrationGroup:ApacheKafka"
    },
    {
        "class": "IntegrationGroupConfig",
        "omagserverPlatformRootURL": "~{egeriaEndpoint}~",
        "omagserverName" : "qs-metadata-store",
        "integrationGroupQualifiedName" : "Egeria:IntegrationGroup:OpenAPIs"
    },
    {
        "class": "IntegrationGroupConfig",
        "omagserverPlatformRootURL": "~{egeriaEndpoint}~",
        "omagserverName" : "qs-metadata-store",
        "integrationGroupQualifiedName" : "Egeria:IntegrationGroup:OpenMetadataObservability"
    },
    {
        "class": "IntegrationGroupConfig",
        "omagserverPlatformRootURL": "~{egeriaEndpoint}~",
        "omagserverName" : "qs-metadata-store",
        "integrationGroupQualifiedName" : "Egeria:IntegrationGroup:PostgreSQL"
    },
    {
        "class": "IntegrationGroupConfig",
        "omagserverPlatformRootURL": "~{egeriaEndpoint}~",
        "omagserverName" : "qs-metadata-store",
        "integrationGroupQualifiedName" : "Egeria:IntegrationGroup:UnityCatalog"
    }
]

###
# Set up the connection for the server security connector.  This connector verifies the authorization of any user calling the server's services.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-integration-daemon/security/connection
Content-Type: application/json

{
  "class": "VirtualConnection",
  "connectorType": {
    "class": "ConnectorType",
    "connectorProviderClassName": "org.odpi.openmetadata.metadatasecurity.accessconnector.OpenMetadataAccessSecurityProvider"
  },
  "embeddedConnections" : [{
    "class": "EmbeddedConnection",
    "embeddedConnection" :
    {
      "class" : "Connection",
      "connectorType" :
      {
        "class" : "ConnectorType",
        "connectorProviderClassName" : "org.odpi.openmetadata.adapters.connectors.secretsstore.yaml.YAMLSecretsStoreProvider"
      },
      "endpoint" :
      {
        "class" : "Endpoint",
        "address" : "~{metadataAccessSecretsStore}~"
      },
      "configurationProperties" :
      {
        "secretsCollectionName" : "~{metadataAccessCollectionName}~"
      }
    }
  }
  ]
}

###
# @name Add PostgreSQL audit log destination
# Add the database audit log destination to the server's configuration document.  The list of severities that are sent to this destination are passed on the request body.  An empty list means all severities.
# The server may have multiple audit log destinations configured.  Typically each destination has a different subset of the severities configured.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/qs-integration-daemon/audit-log-destinations/postgres
Content-Type: application/json

{
  "supportedSeverities" : ["Error", "Exception", "Activity", "Action", "Decision", "Security"],
  "databaseURL": "~{postgreSQLDatabaseURL}~?currentSchema=audit_logs",
  "databaseSchema": "audit_logs",
  "secretsStore": "~{secretsStore}~",
  "secretsCollectionName": "~{postgreSQLServerCollectionName}~"
}


###